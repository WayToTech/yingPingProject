package com.wayto.android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORK_RECORD_TABLE".
*/
public class WorkRecordTableDao extends AbstractDao<WorkRecordTable, Long> {

    public static final String TABLENAME = "WORK_RECORD_TABLE";

    /**
     * Properties of entity WorkRecordTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalTag = new Property(1, int.class, "localTag", false, "LOCAL_TAG");
        public final static Property WorkType = new Property(2, int.class, "workType", false, "WORK_TYPE");
        public final static Property UploadUrl = new Property(3, String.class, "uploadUrl", false, "UPLOAD_URL");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property MissionId = new Property(5, int.class, "missionId", false, "MISSION_ID");
        public final static Property MissionPointId = new Property(6, int.class, "missionPointId", false, "MISSION_POINT_ID");
        public final static Property ImagesUrl = new Property(7, String.class, "imagesUrl", false, "IMAGES_URL");
        public final static Property VideoUrl = new Property(8, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property AudioUrl = new Property(9, String.class, "audioUrl", false, "AUDIO_URL");
        public final static Property Attributes = new Property(10, String.class, "attributes", false, "ATTRIBUTES");
        public final static Property RevStr1 = new Property(11, String.class, "revStr1", false, "REV_STR1");
        public final static Property RevStr2 = new Property(12, String.class, "revStr2", false, "REV_STR2");
        public final static Property RevStr3 = new Property(13, String.class, "revStr3", false, "REV_STR3");
        public final static Property RevInt1 = new Property(14, Integer.class, "revInt1", false, "REV_INT1");
        public final static Property RevInt2 = new Property(15, Integer.class, "revInt2", false, "REV_INT2");
        public final static Property RevInt3 = new Property(16, Integer.class, "revInt3", false, "REV_INT3");
    }


    public WorkRecordTableDao(DaoConfig config) {
        super(config);
    }
    
    public WorkRecordTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORK_RECORD_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOCAL_TAG\" INTEGER NOT NULL ," + // 1: localTag
                "\"WORK_TYPE\" INTEGER NOT NULL ," + // 2: workType
                "\"UPLOAD_URL\" TEXT NOT NULL ," + // 3: uploadUrl
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"MISSION_ID\" INTEGER NOT NULL ," + // 5: missionId
                "\"MISSION_POINT_ID\" INTEGER NOT NULL ," + // 6: missionPointId
                "\"IMAGES_URL\" TEXT," + // 7: imagesUrl
                "\"VIDEO_URL\" TEXT," + // 8: videoUrl
                "\"AUDIO_URL\" TEXT," + // 9: audioUrl
                "\"ATTRIBUTES\" TEXT NOT NULL ," + // 10: attributes
                "\"REV_STR1\" TEXT," + // 11: revStr1
                "\"REV_STR2\" TEXT," + // 12: revStr2
                "\"REV_STR3\" TEXT," + // 13: revStr3
                "\"REV_INT1\" INTEGER," + // 14: revInt1
                "\"REV_INT2\" INTEGER," + // 15: revInt2
                "\"REV_INT3\" INTEGER);"); // 16: revInt3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORK_RECORD_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WorkRecordTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLocalTag());
        stmt.bindLong(3, entity.getWorkType());
        stmt.bindString(4, entity.getUploadUrl());
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getMissionId());
        stmt.bindLong(7, entity.getMissionPointId());
 
        String imagesUrl = entity.getImagesUrl();
        if (imagesUrl != null) {
            stmt.bindString(8, imagesUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(9, videoUrl);
        }
 
        String audioUrl = entity.getAudioUrl();
        if (audioUrl != null) {
            stmt.bindString(10, audioUrl);
        }
        stmt.bindString(11, entity.getAttributes());
 
        String revStr1 = entity.getRevStr1();
        if (revStr1 != null) {
            stmt.bindString(12, revStr1);
        }
 
        String revStr2 = entity.getRevStr2();
        if (revStr2 != null) {
            stmt.bindString(13, revStr2);
        }
 
        String revStr3 = entity.getRevStr3();
        if (revStr3 != null) {
            stmt.bindString(14, revStr3);
        }
 
        Integer revInt1 = entity.getRevInt1();
        if (revInt1 != null) {
            stmt.bindLong(15, revInt1);
        }
 
        Integer revInt2 = entity.getRevInt2();
        if (revInt2 != null) {
            stmt.bindLong(16, revInt2);
        }
 
        Integer revInt3 = entity.getRevInt3();
        if (revInt3 != null) {
            stmt.bindLong(17, revInt3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WorkRecordTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLocalTag());
        stmt.bindLong(3, entity.getWorkType());
        stmt.bindString(4, entity.getUploadUrl());
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getMissionId());
        stmt.bindLong(7, entity.getMissionPointId());
 
        String imagesUrl = entity.getImagesUrl();
        if (imagesUrl != null) {
            stmt.bindString(8, imagesUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(9, videoUrl);
        }
 
        String audioUrl = entity.getAudioUrl();
        if (audioUrl != null) {
            stmt.bindString(10, audioUrl);
        }
        stmt.bindString(11, entity.getAttributes());
 
        String revStr1 = entity.getRevStr1();
        if (revStr1 != null) {
            stmt.bindString(12, revStr1);
        }
 
        String revStr2 = entity.getRevStr2();
        if (revStr2 != null) {
            stmt.bindString(13, revStr2);
        }
 
        String revStr3 = entity.getRevStr3();
        if (revStr3 != null) {
            stmt.bindString(14, revStr3);
        }
 
        Integer revInt1 = entity.getRevInt1();
        if (revInt1 != null) {
            stmt.bindLong(15, revInt1);
        }
 
        Integer revInt2 = entity.getRevInt2();
        if (revInt2 != null) {
            stmt.bindLong(16, revInt2);
        }
 
        Integer revInt3 = entity.getRevInt3();
        if (revInt3 != null) {
            stmt.bindLong(17, revInt3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WorkRecordTable readEntity(Cursor cursor, int offset) {
        WorkRecordTable entity = new WorkRecordTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // localTag
            cursor.getInt(offset + 2), // workType
            cursor.getString(offset + 3), // uploadUrl
            cursor.getLong(offset + 4), // time
            cursor.getInt(offset + 5), // missionId
            cursor.getInt(offset + 6), // missionPointId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imagesUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // videoUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // audioUrl
            cursor.getString(offset + 10), // attributes
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // revStr1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // revStr2
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // revStr3
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // revInt1
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // revInt2
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // revInt3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WorkRecordTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalTag(cursor.getInt(offset + 1));
        entity.setWorkType(cursor.getInt(offset + 2));
        entity.setUploadUrl(cursor.getString(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setMissionId(cursor.getInt(offset + 5));
        entity.setMissionPointId(cursor.getInt(offset + 6));
        entity.setImagesUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVideoUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAudioUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAttributes(cursor.getString(offset + 10));
        entity.setRevStr1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRevStr2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRevStr3(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRevInt1(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setRevInt2(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setRevInt3(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WorkRecordTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WorkRecordTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WorkRecordTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
