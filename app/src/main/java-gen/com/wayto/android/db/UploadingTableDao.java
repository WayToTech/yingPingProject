package com.wayto.android.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPLOADING_TABLE".
*/
public class UploadingTableDao extends AbstractDao<UploadingTable, Long> {

    public static final String TABLENAME = "UPLOADING_TABLE";

    /**
     * Properties of entity UploadingTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Body = new Property(2, String.class, "body", false, "BODY");
        public final static Property ImageUrl = new Property(3, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property VideoUrl = new Property(4, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property AudioUrl = new Property(5, String.class, "audioUrl", false, "AUDIO_URL");
        public final static Property RevStr1 = new Property(6, String.class, "revStr1", false, "REV_STR1");
        public final static Property RevStr2 = new Property(7, String.class, "revStr2", false, "REV_STR2");
        public final static Property RevStr3 = new Property(8, String.class, "revStr3", false, "REV_STR3");
        public final static Property RevInt1 = new Property(9, Integer.class, "revInt1", false, "REV_INT1");
        public final static Property RevInt2 = new Property(10, Integer.class, "revInt2", false, "REV_INT2");
        public final static Property RevInt3 = new Property(11, Integer.class, "revInt3", false, "REV_INT3");
        public final static Property WorkRecordID = new Property(12, long.class, "workRecordID", false, "WORK_RECORD_ID");
    }

    private DaoSession daoSession;


    public UploadingTableDao(DaoConfig config) {
        super(config);
    }
    
    public UploadingTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPLOADING_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"URL\" TEXT NOT NULL ," + // 1: url
                "\"BODY\" TEXT NOT NULL ," + // 2: body
                "\"IMAGE_URL\" TEXT," + // 3: imageUrl
                "\"VIDEO_URL\" TEXT," + // 4: videoUrl
                "\"AUDIO_URL\" TEXT," + // 5: audioUrl
                "\"REV_STR1\" TEXT," + // 6: revStr1
                "\"REV_STR2\" TEXT," + // 7: revStr2
                "\"REV_STR3\" TEXT," + // 8: revStr3
                "\"REV_INT1\" INTEGER," + // 9: revInt1
                "\"REV_INT2\" INTEGER," + // 10: revInt2
                "\"REV_INT3\" INTEGER," + // 11: revInt3
                "\"WORK_RECORD_ID\" INTEGER NOT NULL );"); // 12: workRecordID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPLOADING_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UploadingTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindString(3, entity.getBody());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(5, videoUrl);
        }
 
        String audioUrl = entity.getAudioUrl();
        if (audioUrl != null) {
            stmt.bindString(6, audioUrl);
        }
 
        String revStr1 = entity.getRevStr1();
        if (revStr1 != null) {
            stmt.bindString(7, revStr1);
        }
 
        String revStr2 = entity.getRevStr2();
        if (revStr2 != null) {
            stmt.bindString(8, revStr2);
        }
 
        String revStr3 = entity.getRevStr3();
        if (revStr3 != null) {
            stmt.bindString(9, revStr3);
        }
 
        Integer revInt1 = entity.getRevInt1();
        if (revInt1 != null) {
            stmt.bindLong(10, revInt1);
        }
 
        Integer revInt2 = entity.getRevInt2();
        if (revInt2 != null) {
            stmt.bindLong(11, revInt2);
        }
 
        Integer revInt3 = entity.getRevInt3();
        if (revInt3 != null) {
            stmt.bindLong(12, revInt3);
        }
        stmt.bindLong(13, entity.getWorkRecordID());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UploadingTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindString(3, entity.getBody());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(5, videoUrl);
        }
 
        String audioUrl = entity.getAudioUrl();
        if (audioUrl != null) {
            stmt.bindString(6, audioUrl);
        }
 
        String revStr1 = entity.getRevStr1();
        if (revStr1 != null) {
            stmt.bindString(7, revStr1);
        }
 
        String revStr2 = entity.getRevStr2();
        if (revStr2 != null) {
            stmt.bindString(8, revStr2);
        }
 
        String revStr3 = entity.getRevStr3();
        if (revStr3 != null) {
            stmt.bindString(9, revStr3);
        }
 
        Integer revInt1 = entity.getRevInt1();
        if (revInt1 != null) {
            stmt.bindLong(10, revInt1);
        }
 
        Integer revInt2 = entity.getRevInt2();
        if (revInt2 != null) {
            stmt.bindLong(11, revInt2);
        }
 
        Integer revInt3 = entity.getRevInt3();
        if (revInt3 != null) {
            stmt.bindLong(12, revInt3);
        }
        stmt.bindLong(13, entity.getWorkRecordID());
    }

    @Override
    protected final void attachEntity(UploadingTable entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UploadingTable readEntity(Cursor cursor, int offset) {
        UploadingTable entity = new UploadingTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // url
            cursor.getString(offset + 2), // body
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // audioUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // revStr1
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // revStr2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // revStr3
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // revInt1
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // revInt2
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // revInt3
            cursor.getLong(offset + 12) // workRecordID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UploadingTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setBody(cursor.getString(offset + 2));
        entity.setImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideoUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAudioUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRevStr1(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRevStr2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRevStr3(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRevInt1(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setRevInt2(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setRevInt3(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setWorkRecordID(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UploadingTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UploadingTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UploadingTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getWorkRecordTableDao().getAllColumns());
            builder.append(" FROM UPLOADING_TABLE T");
            builder.append(" LEFT JOIN WORK_RECORD_TABLE T0 ON T.\"WORK_RECORD_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected UploadingTable loadCurrentDeep(Cursor cursor, boolean lock) {
        UploadingTable entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        WorkRecordTable workRecordTable = loadCurrentOther(daoSession.getWorkRecordTableDao(), cursor, offset);
         if(workRecordTable != null) {
            entity.setWorkRecordTable(workRecordTable);
        }

        return entity;    
    }

    public UploadingTable loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<UploadingTable> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<UploadingTable> list = new ArrayList<UploadingTable>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<UploadingTable> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<UploadingTable> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
