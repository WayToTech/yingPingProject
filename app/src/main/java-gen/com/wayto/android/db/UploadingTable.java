package com.wayto.android.db;

import org.greenrobot.greendao.annotation.*;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "UPLOADING_TABLE".
 */
@Entity(active = true)
public class UploadingTable implements java.io.Serializable {

    @Id
    private Long id;

    @NotNull
    private String url;

    @NotNull
    private String body;
    private String imageUrl;
    private String videoUrl;
    private String audioUrl;
    private String revStr1;
    private String revStr2;
    private String revStr3;
    private Integer revInt1;
    private Integer revInt2;
    private Integer revInt3;
    private long workRecordID;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UploadingTableDao myDao;

    @ToOne(joinProperty = "workRecordID")
    private WorkRecordTable workRecordTable;

    @Generated
    private transient Long workRecordTable__resolvedKey;

    @Generated
    public UploadingTable() {
    }

    public UploadingTable(Long id) {
        this.id = id;
    }

    @Generated
    public UploadingTable(Long id, String url, String body, String imageUrl, String videoUrl, String audioUrl, String revStr1, String revStr2, String revStr3, Integer revInt1, Integer revInt2, Integer revInt3, long workRecordID) {
        this.id = id;
        this.url = url;
        this.body = body;
        this.imageUrl = imageUrl;
        this.videoUrl = videoUrl;
        this.audioUrl = audioUrl;
        this.revStr1 = revStr1;
        this.revStr2 = revStr2;
        this.revStr3 = revStr3;
        this.revInt1 = revInt1;
        this.revInt2 = revInt2;
        this.revInt3 = revInt3;
        this.workRecordID = workRecordID;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUploadingTableDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getUrl() {
        return url;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUrl(@NotNull String url) {
        this.url = url;
    }

    @NotNull
    public String getBody() {
        return body;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBody(@NotNull String body) {
        this.body = body;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public String getVideoUrl() {
        return videoUrl;
    }

    public void setVideoUrl(String videoUrl) {
        this.videoUrl = videoUrl;
    }

    public String getAudioUrl() {
        return audioUrl;
    }

    public void setAudioUrl(String audioUrl) {
        this.audioUrl = audioUrl;
    }

    public String getRevStr1() {
        return revStr1;
    }

    public void setRevStr1(String revStr1) {
        this.revStr1 = revStr1;
    }

    public String getRevStr2() {
        return revStr2;
    }

    public void setRevStr2(String revStr2) {
        this.revStr2 = revStr2;
    }

    public String getRevStr3() {
        return revStr3;
    }

    public void setRevStr3(String revStr3) {
        this.revStr3 = revStr3;
    }

    public Integer getRevInt1() {
        return revInt1;
    }

    public void setRevInt1(Integer revInt1) {
        this.revInt1 = revInt1;
    }

    public Integer getRevInt2() {
        return revInt2;
    }

    public void setRevInt2(Integer revInt2) {
        this.revInt2 = revInt2;
    }

    public Integer getRevInt3() {
        return revInt3;
    }

    public void setRevInt3(Integer revInt3) {
        this.revInt3 = revInt3;
    }

    public long getWorkRecordID() {
        return workRecordID;
    }

    public void setWorkRecordID(long workRecordID) {
        this.workRecordID = workRecordID;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public WorkRecordTable getWorkRecordTable() {
        long __key = this.workRecordID;
        if (workRecordTable__resolvedKey == null || !workRecordTable__resolvedKey.equals(__key)) {
            __throwIfDetached();
            WorkRecordTableDao targetDao = daoSession.getWorkRecordTableDao();
            WorkRecordTable workRecordTableNew = targetDao.load(__key);
            synchronized (this) {
                workRecordTable = workRecordTableNew;
            	workRecordTable__resolvedKey = __key;
            }
        }
        return workRecordTable;
    }

    @Generated
    public void setWorkRecordTable(WorkRecordTable workRecordTable) {
        if (workRecordTable == null) {
            throw new DaoException("To-one property 'workRecordID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.workRecordTable = workRecordTable;
            workRecordID = workRecordTable.getId();
            workRecordTable__resolvedKey = workRecordID;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
